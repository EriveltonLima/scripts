#!/bin/bash

# Script para instalar Git e configurar com Personal Access Token
# Autor: Script automatizado para instala√ß√£o e configura√ß√£o Git

echo "=== Instala√ß√£o e Configura√ß√£o Automatizada do Git com Personal Access Token ==="
echo

# Fun√ß√£o para validar entrada
validate_input() {
    if [[ -z "$1" ]]; then
        echo "‚ùå Erro: Campo obrigat√≥rio n√£o pode estar vazio!"
        return 1
    fi
    return 0
}

# Fun√ß√£o para instalar Git
install_git() {
    echo "üîß Verificando instala√ß√£o do Git..."
    
    if command -v git >/dev/null 2>&1; then
        echo "‚úÖ Git j√° est√° instalado: $(git --version)"
        return 0
    fi
    
    echo "üì¶ Git n√£o encontrado. Instalando..."
    
    # Detectar sistema operacional
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$ID
        VERSION=$VERSION_ID
    else
        echo "‚ùå N√£o foi poss√≠vel detectar o sistema operacional"
        return 1
    fi
    
    case $OS in
        ubuntu|debian)
            echo "üêß Detectado: $OS $VERSION"
            echo "Atualizando reposit√≥rios..."
            sudo apt update -y
            
            echo "Instalando Git..."
            sudo apt install git -y
            
            # Instalar depend√™ncias √∫teis
            sudo apt install curl wget -y
            ;;
        fedora)
            echo "üé© Detectado: Fedora $VERSION"
            if [[ ${VERSION%%.*} -ge 22 ]]; then
                sudo dnf install git curl wget -y
            else
                sudo yum install git curl wget -y
            fi
            ;;
        centos|rhel)
            echo "üè¢ Detectado: $OS $VERSION"
            sudo yum install git curl wget -y
            ;;
        arch)
            echo "üèπ Detectado: Arch Linux"
            sudo pacman -S git curl wget --noconfirm
            ;;
        *)
            echo "‚ùå Sistema operacional n√£o suportado: $OS"
            echo "üí° Tente instalar o Git manualmente"
            return 1
            ;;
    esac
    
    # Verificar se a instala√ß√£o foi bem-sucedida
    if command -v git >/dev/null 2>&1; then
        echo "‚úÖ Git instalado com sucesso: $(git --version)"
        return 0
    else
        echo "‚ùå Falha na instala√ß√£o do Git"
        return 1
    fi
}

# Fun√ß√£o para configurar credenciais b√°sicas
configure_git_user() {
    echo "üìù Configurando identidade do usu√°rio Git..."
    
    # Pr√©-configurar com dados do usu√°rio
    default_name="Erivelton de Lima da Cruz"
    default_email="erivelton@ufpel.edu.br"
    default_username="eriveltonlima"
    
    echo "Dados pr√©-configurados:"
    echo "Nome: $default_name"
    echo "Email: $default_email"
    echo "Username GitHub: $default_username"
    echo
    
    read -p "Deseja usar esses dados? (s/n): " use_defaults
    
    if [[ "$use_defaults" =~ ^[Ss]$ ]]; then
        git_name="$default_name"
        git_email="$default_email"
        github_username="$default_username"
    else
        read -p "Digite seu nome completo: " git_name
        validate_input "$git_name" || exit 1
        
        read -p "Digite seu email: " git_email
        validate_input "$git_email" || exit 1
        
        read -p "Digite seu username do GitHub: " github_username
        validate_input "$github_username" || exit 1
    fi
    
    # Configurar globalmente
    git config --global user.name "$git_name"
    git config --global user.email "$git_email"
    
    echo "‚úÖ Identidade configurada:"
    echo "   Nome: $git_name"
    echo "   Email: $git_email"
    echo "   Username GitHub: $github_username"
    echo
    
    # Retornar username para uso posterior
    export GITHUB_USERNAME="$github_username"
}

# Fun√ß√£o para configurar cache de credenciais
configure_credential_cache() {
    echo "üîê Configurando cache de credenciais..."
    
    echo "Escolha o m√©todo de armazenamento:"
    echo "1) Cache tempor√°rio (15 minutos)"
    echo "2) Cache longo (1 hora)"
    echo "3) Store permanente (arquivo) - Recomendado"
    echo "4) Pular configura√ß√£o de cache"
    
    read -p "Escolha uma op√ß√£o (1-4) [3]: " cache_option
    cache_option=${cache_option:-3}  # Default para op√ß√£o 3
    
    case $cache_option in
        1)
            git config --global credential.helper cache
            echo "‚úÖ Cache tempor√°rio configurado (15 minutos)"
            ;;
        2)
            git config --global credential.helper "cache --timeout=3600"
            echo "‚úÖ Cache longo configurado (1 hora)"
            ;;
        3)
            git config --global credential.helper store
            echo "‚úÖ Store permanente configurado"
            echo "üí° Credenciais ser√£o salvas em ~/.git-credentials"
            ;;
        4)
            echo "‚è≠Ô∏è  Cache de credenciais pulado"
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida, usando store permanente"
            git config --global credential.helper store
            ;;
    esac
    echo
}

# Fun√ß√£o para configurar token
configure_github_token() {
    echo "üîó Configurando Personal Access Token para GitHub..."
    
    if [[ -z "$GITHUB_USERNAME" ]]; then
        read -p "Digite seu username do GitHub: " GITHUB_USERNAME
        validate_input "$GITHUB_USERNAME" || return 1
    fi
    
    echo "Username GitHub: $GITHUB_USERNAME"
    
    read -s -p "Digite seu Personal Access Token: " token
    echo
    validate_input "$token" || return 1
    
    # Configurar credencial para GitHub
    git config --global credential."https://github.com".username "$GITHUB_USERNAME"
    
    # Se store estiver habilitado, salvar token
    if git config --global credential.helper | grep -q "store"; then
        echo "https://$GITHUB_USERNAME:$token@github.com" >> ~/.git-credentials
        echo "‚úÖ Token configurado e salvo para GitHub"
    else
        echo "‚úÖ Username configurado para GitHub"
        echo "üí° Token ser√° solicitado na primeira opera√ß√£o Git"
    fi
    
    # Configura√ß√µes adicionais √∫teis
    git config --global init.defaultBranch main
    git config --global pull.rebase false
    git config --global core.autocrlf input
    
    echo "‚úÖ Configura√ß√µes adicionais aplicadas:"
    echo "   - Branch padr√£o: main"
    echo "   - Pull strategy: merge"
    echo "   - Line endings: input"
    echo
}

# Fun√ß√£o para testar configura√ß√£o
test_git_config() {
    echo "üß™ Testando configura√ß√£o..."
    
    echo "Configura√ß√µes atuais:"
    echo "Nome: $(git config --global user.name)"
    echo "Email: $(git config --global user.email)"
    echo "Credential Helper: $(git config --global credential.helper)"
    echo "Branch padr√£o: $(git config --global init.defaultBranch)"
    
    # Teste de conectividade com GitHub
    echo
    echo "Testando conectividade com GitHub..."
    if curl -s https://github.com >/dev/null; then
        echo "‚úÖ Conectividade com GitHub OK"
    else
        echo "‚ùå Problema de conectividade com GitHub"
    fi
    
    # Verificar se h√° reposit√≥rio local para testar
    if [[ -d .git ]]; then
        echo
        read -p "Deseja testar com o reposit√≥rio atual? (s/n): " test_repo
        if [[ "$test_repo" =~ ^[Ss]$ ]]; then
            echo "Executando git remote -v..."
            git remote -v
            echo
            echo "üí° Para testar completamente, execute: git pull ou git push"
        fi
    fi
    echo
}

# Fun√ß√£o para mostrar instru√ß√µes do token
show_token_instructions() {
    echo "üìã Como criar um Personal Access Token no GitHub:"
    echo
    echo "1. Acesse: https://github.com/settings/tokens"
    echo "2. Clique em 'Generate new token' ‚Üí 'Generate new token (classic)'"
    echo "3. Preencha:"
    echo "   - Note: 'Scripts reposit√≥rio' ou nome descritivo"
    echo "   - Expiration: Escolha a dura√ß√£o (recomendo 1 year)"
    echo "   - Scopes: Marque 'repo' para acesso completo aos reposit√≥rios"
    echo "4. Clique em 'Generate token'"
    echo "5. IMPORTANTE: Copie o token imediatamente (s√≥ aparece uma vez)"
    echo "6. O token come√ßa com 'ghp_'"
    echo
    read -p "Pressione ENTER ap√≥s criar o token..."
    echo
}

# Fun√ß√£o para configura√ß√£o r√°pida
quick_setup() {
    echo "üöÄ Configura√ß√£o r√°pida para eriveltonlima..."
    
    install_git || exit 1
    configure_git_user
    configure_credential_cache
    show_token_instructions
    configure_github_token
    test_git_config
    
    echo "üéâ Configura√ß√£o completa!"
    echo "üí° Agora voc√™ pode clonar reposit√≥rios e fazer push/pull normalmente"
}

# Fun√ß√£o para limpar configura√ß√µes
reset_git_config() {
    echo "üóëÔ∏è  Limpando configura√ß√µes Git..."
    
    read -p "Tem certeza que deseja limpar as configura√ß√µes? (s/n): " confirm
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
        git config --global --unset user.name 2>/dev/null
        git config --global --unset user.email 2>/dev/null
        git config --global --unset credential.helper 2>/dev/null
        git config --global --unset init.defaultBranch 2>/dev/null
        git config --global --unset pull.rebase 2>/dev/null
        git config --global --unset core.autocrlf 2>/dev/null
        
        # Limpar arquivo de credenciais se existir
        if [[ -f ~/.git-credentials ]]; then
            read -p "Deseja limpar o arquivo de credenciais tamb√©m? (s/n): " clean_creds
            if [[ "$clean_creds" =~ ^[Ss]$ ]]; then
                rm ~/.git-credentials
                echo "‚úÖ Arquivo de credenciais removido"
            fi
        fi
        
        echo "‚úÖ Configura√ß√µes Git limpas"
    else
        echo "‚ùå Opera√ß√£o cancelada"
    fi
    echo
}

# Menu principal
show_menu() {
    echo "Escolha uma op√ß√£o:"
    echo "1) Configura√ß√£o r√°pida completa (recomendado para eriveltonlima)"
    echo "2) Instalar apenas o Git"
    echo "3) Configurar apenas identidade (nome/email)"
    echo "4) Configurar apenas cache de credenciais"
    echo "5) Configurar token para GitHub"
    echo "6) Mostrar instru√ß√µes para criar token"
    echo "7) Testar configura√ß√£o atual"
    echo "8) Limpar configura√ß√µes"
    echo "9) Sair"
    echo
}

# Verificar se est√° executando como root
if [[ $EUID -eq 0 ]]; then
    echo "‚ö†Ô∏è  Executando como root. Algumas configura√ß√µes ser√£o aplicadas globalmente."
    echo
fi

# Loop principal
while true; do
    show_menu
    read -p "Digite sua op√ß√£o (1-9) [1]: " option
    option=${option:-1}  # Default para op√ß√£o 1
    echo
    
    case $option in
        1)
            quick_setup
            break
            ;;
        2)
            install_git
            ;;
        3)
            configure_git_user
            ;;
        4)
            configure_credential_cache
            ;;
        5)
            configure_github_token
            ;;
        6)
            show_token_instructions
            ;;
        7)
            test_git_config
            ;;
        8)
            reset_git_config
            ;;
        9)
            echo "üëã Script finalizado!"
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            echo
            ;;
    esac
done
